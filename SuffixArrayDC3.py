from radixSort import RadixSort
'''class to build SuffixArray'''
class SuffixArray:


		
	@staticmethod
	def convertToIntegerAlphabetSequence(SEQ):
		integer_dict = {}
		for i in range(len(SEQ)):
			if SEQ[i] not in integer_dict:
				integer_dict[SEQ[i]] = 1
		sorted_alphabet = sorted(integer_dict)

		#create alphabet to integer mapping
		integer_dict = {}
		i = 1
		for alphabet in sorted_alphabet:
			integer_dict[alphabet] = i
			i += 1

		#build ineger alphabet array
		INT_SEQ = []	
		for alphabet in SEQ:
			INT_SEQ.append(integer_dict[alphabet])
		#release dict
		integer_dict = {}
		return INT_SEQ


	'''method to build suffix array in linear time'''
	@staticmethod
	def buildLinearSA(SEQ):
		
		SA = []
		SA_12 = []
		#construct sample and non-sample suffix positions
		B1 = []
		B2 = []
		B0 = []
		for i in range(len(SEQ)):
			if i%3 == 0:
				B0.append(i)
			elif i%3 == 1:
				B1.append(i)
			else:
				B2.append(i)

		#print("B0",B0)		
		#add dummy mod 1 suffix  position if n%3 == 1
		'''if len(SEQ)%3 == 1:
			B1.append(B1[-1]+3)'''
		
		#pad SEQ with three 000. 0 is used as sentinel alphabet here 
		SEQ = SEQ + [0 for i in range(3)]
			
		#concatenate sample suffix positions for B1 and B2
		C = B1 + B2

		#create SC which is set of sample suffixes
		#construct R1 and R2 which are set of triples starting at sample suffix positions
		SC = []
		R = []
		for i in C:
			suffix = SEQ[i:]
			#SC.append(suffix)
			#if(len(suffix)>=3):
			R.append(suffix[0:3])
			'''else: # suffix is either of 1 or 2 len. pad with $ character
				new_suffix = suffix + '$' * (3-len(suffix))
				R.append(new_suffix)
				'''

		#print(SC)
		#print(R)
		#sort the sample suffixes
		#sorting the suffixes of R gives the order of suffixes in SC as well
		sortedData = RadixSort.radix_sortIntegerString(R,3)
		R_prime, areRankDistincts = RadixSort.getRankForSortedList(R,sortedData)
		#print(R_prime)
		'''
		if ranks in R_prime are not distinct, call the DC3 algorithm/linearSA method recursively
		'''
		SA_12 = [0 for i in range(len(R_prime))]
		#print("R_prime",R_prime)
		if not areRankDistincts:
			SA_12 = SuffixArray.buildLinearSA(R_prime)
			for i in range(len(R_prime)):
				#print("R_prime len: ", len(R_prime))
				#print("SA_12 len: ", len(SA_12))
				R_prime[SA_12[i]] = i + 1
		else:
			for i in range(len(R_prime)):
				SA_12[R_prime[i]-1] = i # coz we ranked R_prime starting at 1

		#now we have ranks of S_i using SA_12 where S_i belongs to SC for i = 0 to len(SC)
		#let's rank(Si)
		rank_Si = {}
		for i in range(len(SA_12)): # C is set of sample suffix positions for mod 1 and 2 triples
			rank = i + 1 # we start rank from 1
			#R_prime_triple = R_prime[SA_12[i]]
			s_i = C[SA_12[i]]
			rank_Si[s_i] = rank
		n_2 = len(SEQ)
		rank_Si[n_2-1] = 0
		rank_Si[n_2-2] = 0
		rank_Si[n_2-3] = 0
		#print("rank_Si",rank_Si)

		#print SEQ
		#print("SEQ",SEQ)

		#sort non-sample suffixes using radix sort??
		B0_suffixes = []
		for i in B0:
			B0_suffixes.append((SEQ[i],rank_Si[i+1]))
		#print("B0_suffixes",B0_suffixes)
		sorted_B0_suffixes = RadixSort.radix_sortPairedList(B0_suffixes)
		rank_B0, areRankDistincts = RadixSort.getRankForSortedList(B0_suffixes,sorted_B0_suffixes)
		SA_0 = [0 for i in range(len(B0_suffixes))]
		for i in range(len(B0_suffixes)):
			SA_0[rank_B0[i]-1] = i
		
		#merge the sorted suffixes
		i=0 
		j=0
		#print("SA_12",SA_12)
		#print("SA_0",SA_0)
		#print("ranked_B0",rank_B0)
		#print("B0",B0)
		while i < len(SA_12) and j < len(SA_0):
			suffix_12 = C[SA_12[i]]
			suffix_0 = B0[SA_0[j]]
			if suffix_12 % 3 == 1:
				if  SuffixArray.isLessThanTuple(SEQ[suffix_12],rank_Si[suffix_12+1],SEQ[suffix_0],rank_Si[suffix_0+1]):
					SA.append(suffix_12)
					i += 1
				else:
					SA.append(suffix_0)
					j += 1
			else:
				#print("(",suffix_12,SEQ[suffix_12],SEQ[suffix_12+1],rank_Si[suffix_12+2],")","(",suffix_0,SEQ[suffix_0],SEQ[suffix_0+1],rank_Si[suffix_0+2],")")
				if  SuffixArray.isLessThanTriple(SEQ[suffix_12],SEQ[suffix_12+1],rank_Si[suffix_12+2],SEQ[suffix_0],SEQ[suffix_0+1],rank_Si[suffix_0+2]):
					SA.append(suffix_12)
					i += 1
				else:
					SA.append(suffix_0)
					j += 1
		while i < len(SA_12):
			suffix_12 = C[SA_12[i]]
			SA.append(suffix_12)
			i += 1
		while j < len(SA_0):
			suffix_0 = B0[SA_0[j]]
			SA.append(suffix_0)
			j += 1
		return SA

	@staticmethod
	def isLessThanTuple(ti,rank_i_1,tj,rank_j_1):
		isLess = ti<tj
		eqAndRankedHigher = ti == tj and rank_i_1 < rank_j_1
		if  isLess or eqAndRankedHigher:
			return True
		return False

	@staticmethod
	def isLessThanTriple(ti,ti_1,rank_i_2,tj,tj_1,rank_j_2):
		if ti<tj:
			return True
		if ti>tj:
			return False
		return SuffixArray.isLessThanTuple(ti_1,rank_i_2,tj_1,rank_j_2)

	@staticmethod
	def buildNaiveSA(SEQ):
		SA = []
		for i in range(len(SEQ)):
			SA.append(i)
		SA.sort(key=lambda k:SEQ[k:])
		#print(SA)
		return SA


'''
#SEQ = 'GATCAACCTTCATACAGATCTAGAGTCTAAAGCAGTGATCTCCCGCGTGCGAGATAAAAATACTAGGTAACTAGAGGGACTGCGACGTTCTAAACGTTGGTCCGTCAGAAGCGCCATCCAGGATCACGTTACCCCGAAAAAAAGATATCAGGAGCTCTCCTCCTCTGCAGTCAGGTCTATAGAAACTACAGGACTAACCTTCCTGGCAACCGGGAGGTGGGAATCCGTCACATATGAGAAGGTATTTGCCCGATAATCAATACTCCAGGCATCTAACTTTTCCCACTGCCTTAAGCCGGCTTGCCCTTTCTGCCTGTAGATCCATTGGACTGGTGCCAACGCGCAGGCATAGTTCGAGGAGAATTATCCGGGGGCAATGACAACCAGCATCTCGGGTCTTGCCCAACCCGTCTACACGCTGTTATAGCGAATCAGCGGGAACCCGGTGCCACGCGATGGAACGTCCTTAACTCTGGCAGGCAATTAAAGGGAACGTATATATAACGCAAAGAAGCTGGAAAATTGGCGAGAGAATCTTCTCTCTGTCTATCGAAGAATGGCCACGCGGTGGCAACCGTCATGCTAGCGTGCGGGGTACACTTGCTAACCATTTGGGACACGGGACACTCGCTGTTTTCGAAATTACCCTTTATGCGCGGGTATTGAACCACGCTTATGCCCAGCATCGTTACAAGCAGACTCATACTAGATGTATTATGCCCGCCATGCAGACGAAACCAGTCGGAGATTACCGAGCATTCTATCACGTCGGCGACCACTAGTGAGCTACTGGAGCCGAGGGGTAACGTTGATGCCCCTAAGAACCTCTCGGTCGACGCAAGCGATTACACTCCTGTCACATCATAATCGTTTGCTATTCAGGGCTTGACCAACACTGGATTGCTTTTCACTTAAAGTATTATGCACGACAGGGTGCGTGTACCATGTAAACCTGTTATAACTTACCTCAGACTAGTTGGAAGTGTGGCTAGATCTTAGCTTACGTCACTAGAGGGTCCACGTTTAGTTTTTAAGATCCATTGATCTCCTAAACGCTGCAAGATTCGCAACCTGGTATACTTAGCGCTAGGTCCTAGTGCAGCGGGACTTTTTTTCTAAAGTCGTTGAGAGGAGGAGTCGTCAGACCAGATAGCTTTGATGTCCTGATCGGAAGGATCGTTGGCCCCCGACCCTTAGACTCTGTACTCAGTTCTATAAACGAGCCATTGGATACGAGATCCGTAGATTGATAAGGGACACGGAATATCCCCGGACGCAATAGACGGACAGCTTGGTATCCTGAGCACAGTCGCGCGTCCGAATCTAGCTCTACTTTAGAGGCCCCGGATTCTGATGGTCGTAGACCGCAGAACCGATTGGGGGGATGTACAACAATATCTGTTAGTCACCTTTGGGTCACGGTCTGCTACCTTACTGGAATTTAGTCCGTCCTATAATTTCCCTTGCATATAAGTTGCGTTACTTCGGCCTCCTAACCGCACCCTTAGCACGAAGACAGATTCGTTCTTACCCATACTCCACCGTTGGCAGGGGGATCGCATGTCCCACGTGAAACATTGCTAAACCCTCAGGTCTCTGAGCGACAAAAGCTTTAAAGGGAAATTCGCGCCCATAACTTGGTCCGAATACGGGTTCTTGCATCGTTCGACTGAGTTTGTTTTATATAAAACGGGCGCAATGTCTGCTTTGATCAACCTCCAATACCTCGTATCATTGTGCACCTGCCGGTGACCACTCAACGATGTGGGGACGCCGTTGCAACTTCGAGGACCTAATGTGACCGACCTAGATTCGGCATTGTGGGCAGAATGAAGTATTGGCAGACATTGAGTGCCGAACAAGACCTGACCTAACGGTAAGAGAGTCTCATAATACGTCCGGCCGCATGCGCAGGGTATATTTGGACAGTATCGAATGGACTCTGATGAACCTTTACACCGATCTAGAAACGGGTGCGTGGATTAGCCAGGTGCAAACCAAAAATCCTGGGCTACTTGATGTTTTGTGACGTTCTAAGAGTTGGACGAAATGTTTCGCGACCTAGGATGAGGTCGCCCTAGAAAATAGATTTGTGCTACTCTCCTCATAAGCAGTCCGGTGTATCGAAAGTACAAGACTAGCCTTGCTAGCAACCGCGGGCTGGGAGCCTAAGGTATCACTCAAGAAACAGGCTCGGTAACATACGCTCTAGCTATCTGACTATCCCCTACGTCATATAGGGACCTATGTTATCTGCGTGTCCAACCTTAGGATTCACTTCAGCGCGCAGGCTTGGGTCGAGATAAAATCTCCAGTGCCCAAGACCACGGGCGCTCGGCGCCTTGGCTAATCCCCGTACATGTTGTTATAAATAATCAGTAGAAAGTCTGTGTTAGAGGGTGGAGTGACCATAAATCAAGGACGATATTAATCGGAAGGAGTATTCAACGTGATGAAGTCGCAGGGTTAACGTGGGAATGGTGCTTCTGTCCTAACAGGTTAGGGTATAATGCTGGAACCGTCCCCCAAGCGTTCAGGGTGGGCTTTGCTACGACTTCCGAGTCCAAAGACTCCCTGTTTTCGAAATTTGCGCTCAAGGGCGAGTATTGGACCTGGCTTACGCCTTAGTACGTAGCAAGGTGACACAAGCACAGTAGATCCTGCCCGCGTTTCCTATGTATCAAGTTAGAACTTATGGAATATAATAACATGTGGATGGCCAGTGGTCGGTTGTTACACGCCTGCCGCAACGTTGAAAGACCCGGATTAGACTGGCAAGATCTATGGCGTGAGACCCGTTATGCTCCATTACGGTCAGTGGGTCACAGCTAGTTGTGGATTGGATTGCCATTCTCCGAGTGTATTACCGTGACGGCCGCACGGGTCCCATATAATGCAATCGTAGTCTACCTGACTGTACTTAGAAATGTGGCTTCGCCTTTGCCCACGCACCTGATCGCTCCTCGTTTGCTTTTAAGGACCGGACGAACCACAGAGCATTAGAAGAATCTCTAGCTGCTTTACAAAGTGCTGGTTCCTTTTCCAGCGGGATGTTTTATCTAAACGCAATGAGAGAGGTATTCCTCAGGCCACATCGCTTCCTAGTTCCGCTGGGATCCATCGTTGGCGGCCGAAGCCGCCATTCCATAGTGAGTTCTTCGTCTGAGTCATTCTGTGCCAGATCGACTGACAGATAGCGGATCCAGTTTATCCCTCGAAACTATAGACGTACAGGTCGAAATCTTAAGTCAAATCGCGCGTCTAGACTCAGCTCTATTTTAGTGGTCATGGGTTCTGGTCCCCCCGAGCGGCGCAACCGATTAGGACCATGTAGAACATTACTTATAAGTCATCTTTTAAACACAATCTTCCTGCTCAGTGGTACATGGTTTTCGCTATTGCTAGCCAGCCTCATAAGTAACACCACTACTGCGACCCAAATGCACCCTTTCCACGAACACAGGGTTGTCCGATCCTATATTACGACTCCGGGAAGGGGTTCGCAAGTCGCACCCTAAACGATGTTGAAGGCTCAGGATGCACAGGCACAAGTACAATATATACGTGTTCCGGCTCTTATCCTGCATCGAAAGCTCAATCATGCATCGTACCAGTGTGTTCGTGTCATCTAGGAGGGGCGCGTAGGATAAATAATTCAATTAAGATTACGTTATGCTACTGTACACCTACCCGTCACCGGCCAACAATGTGCGGATGGCGCCACGACTTACTGGGCCTGATTTCACCGCTTCTAATACCGCACACTGGGCAATACGAGGTCAAGCCAGTCACGCAGTAACGTTCATCAGCTAACGTAACAGTTAGAGGCTCGCTAAATCGCACTGTCGGCGTCCCTTGGGTATTTTACGCTAGCATCAGGTAGGCTAGCATGTATCTTTCCTCCCAGGGGTATGCGGGTGCGTGGACAAATGAGCAGCAAACGTAAATTCTCGGCGTGCTTGGTGTCTCGTATTTCTCCTGGAGATCAAGGAAATGTTTCATGACCAAGCGAAAGGCCGCTCTACGGAATGGATTTACGTTACTGCCTGCATAAGGAGACCGGTGTAGCCAAGGACGAAGGCGACCCTAGGTTCTAACCGTCGACTTCGGCGGTAAGGTATCACTCAGGAAGCAGACACTGATAGACACGGTCTAGCAGATCGTTTGACGACTAGGTCAAATTGAGTGGTTTAATATCGGCATGTCTGGCTTTAGAATTCAGTATAGTGCGCTGATCCGAGTCGAATTAAAAACACCAGTACCCAAAACCAGGCGGGCTCGCCACGTCGGCTAATCCTGGTACATTTTGTAAACAATGTTCTGAAGAAAATTTGTGAAAGAAGGACGGGTCATCGCCTACTAATAGCAACAACGATCGGCCGCACCTTCCATTGTCGTGGCGACGCTCGGATTACACGGCAAAGGTGCTTGTGTTCCGACAGGCTAGCATATAATCCTGAGGCGTTACCCCAATCGTTCACCGTCGGATTTGCTACAGCCCCTGAACGCTACATGTACGAAACCATGTTATGTATGCACTAGGCCAACAATAGGACGTAGCCTTGTAGTTAGTACGTAGCCTGGTCGCATAAGTACAGTAGATCCTCCCCGCGCATCCTATTTATTAAGTTAATTCTACAGCAAAACGATCATATGCAGATCCGCAGTGGCCGGTAGACACACGTCCACCCCGCTGCTCTGTGACAGGGACTAAAGAGGCGAAGATTATCGTGTGTGCCCCGTTATGGTCGAGTTCGGTCAGAGCGTCATTGCGAGTAGTCGTTTGCTTTCTCGAATTCCGAGCGATTAAGCGTGACAGTCCCAGCGAACCCACAAAACGTGATCGCAGTCCATGCGATCATACGCAAGAAGGAAGGTCCCCATACACCGACGCACCAGTTTACACGCCGTATGCATAAACGAGCTGCACAAACGAGAGTGCTTGAACTGGACCTCTAGTTCCTCTACAAAGAACAGGTTGACCTGTCGCGAAGTTGCCTTGCCTAGATGCAATGTCGGACGTATTACTTTTGCCTCAACGGCTCCTGCTTTCGCTGAAACCCAAGACAGGCAACAGTAACCGCCTTTTGAAGGCGAGTCCTTCGTCTGTGACTAACTGTGCCAAATCGTCTTCCAAACTCCTAATCCAGTTTAACTCACCAAATTATAGCCATACAGACCCTAATTTCATATCATATCACGCCATTAGCCTCTGCTAAAATTCTGTGCTCAAGGGTTTTGGTTCGCCCGAGTGATGTTGCCAATTAGGACCATCAAATGCACATGTTACAGGACTTCTTATAAATACTTTTTTCCTGGGGAGTAGCGGATCTTAATGGATGTTGCCAGCTGGTATGGAAGCTAATAGCGCCGGTGGGAGCGTAATCTGCCGTCTCCACCAACACAACGCTATCGGGTCATATTATAAGATTCCGCAATGGGGTTACTTATAGGTAGCCTTAACGATATCCGGAACTTGCGATGTACGTGCTATGCTTTAATACATACCTGGCCCAGTAGTTTTCCAATATGGGAACATCAATTGTACATCGGGCCGGGATAATCATGTCATCACGGAAGTAGCCGTAAGACAAATAATTCAAAAGAGATGTCGTTTTGCTAGTTCACGTGAAGGTGTCTCGCGCCACCTCTAAGTAAGTGGGCCGTCGAGACATTATCCCTGATTTTTTCACTACTATTAGTACTCACGGCGCAATACCACCACAGCCTTGTCTCGCCAGAATGCTGGTCAGCATACGGAAGAGCTCAAGGCAGGTCAATTCGCACTGTCAGGGTCACATGGGTGTTTGGCACTACCGACACGAACCTCAGTAAGCGTTCTTCCTACCAGAGGTCTGTGGCCGCGTGGTCAAAAGTGCGGCTTTCGTATTTGCTGCTCGTCTATACTTTCACAATCTTGACCTGCACGGCAAAGAGACGCTTCTTGTGGAGCTCGACAACGCAACAACGCGACGGATCTACGTCACAGCGAGTATAGTGAAAACGAAGTTGCTGACGGCGGAAGCGACATAGGGATCTGTCAGTTGTCATTCGCGAAAAACATCCGTCCCCGAGGGGGACAGTCACTGACGCGGTTTTGTAGAAGCCTAGGGGAACAGGTTAGTTTGAGTAGCTTAAGAATGTAAATTCTGGGATTATAGTGTAGTAATCTCTAATTAACGGTGACGGTTTTAAGACAGGTCTTCGCAAAATCAAGCGGGGTGATTTCAACAGATTTTGCTGATGGTTTAGGCGTACAATGCCCTGAAGAATAATTAAGAAAATAGCACTCCTCGTCGCCTAGAATTACCTACCGGCGTCCACCATACCTTCGATTATCGCGCCCACTCTCCCATTAGTCGGCACAGGTGGATGTGTTGCGATAGCCCGCTAAGATATTCTAAGGCGTAACGCAGATGAATATTCTACAGAGTTGCCATAGGCGTTGAACGCTTCACGGACGATAGGAATTTGCGTATAGAGCGGGTCATCGAAGGGTTATACACTCGTAGTTAACATCTAGCCCGGCTCTATCAGTACACCAGTGCCTTGAATGACATACTCATCATTAAACTTTCTCAACAGTCAAACGACCAAGTGCATTTCCAAGGAGTGCGATGGAGATTCATTCTCTCGCCAGCACTGTAATAGGCACTAAAAGAGTGATGATAATCATGAGTGCCGTGCTAAGACGGTGTCGGAACAAAGCGGTCTTACGGTCAGTCGTATTTCCTCTCGAGTCCCGTCCAGTTGAGCGTATCACTCCCAGTGTACTAGCAAGCCGAGAAGGCTGTGCTTGGAGTCAATCGGATGTAGGATGGTCTCCAGACACCGGGCCACCACTCTTCACGCCTAAAGCATAAACGTCGAGCAGTCATGAAAGTCTTAGTACCGGACGTGCCGTTTCACTGCGAATATTACCTGAAGCTGTACCGTTATTGCGGAGCAAAGATGCAGTGCTGCTCTTATCATATTTGTATTGACGACAGCCGCCTTCGCGGTTTCCTCAGACACTTAAGAATAAGGGCTTATTGTAGGCAGAGGCACGCCCTTTTAGTGGCTGCGGCAAAATATCTTCGGATCCCCTTGTCTAACCAAATTAATCGAATTCTCTCATTTAAGACCCTAATATGTCATCATTAGTGTTTAAATGCCACCCCGAAAATACCGCCTAGAAATGTCTATGATTGGTCCACTAAAGTTGATTAAAACGACTGCTAAATCCGCGTGATAGGGCATTTGAAGTTTAATTTTGTATCGCAAGGTACTCCCGATCTTAATGGATGGCCGGAAGTGGTACGGATGCAATAAGCGCGGGTGAGAGGGTAATTAGGCGCGTTCACCTACGCTACGCTAACGGGCGATTCTATAAGAATGCACATTGCGTCGATTCATAAGATGTCTCGACCGCATGCGCAACTTGTGAAGTGTCTACTATCCCTAAGCGCATATCTCGCACAGTAACCCCCGAATATGTCGGCATCTGATGTTACCCGGGTTGAGTTAGTGTTGAGCTCACGGAACTTATTGTATGAGTAGAGATTTGTAAGAGCTGTTAGTTAGCTCGCTCAGCTAATAGTTGCCCACACAACGTCAAAATTAGAGAACGGTCGTAACATTATCGGTGGTTCTCTAACTACTATCAGTACCCACGACTCGACTCTGCCGCAGCTACGTATCGCCTGAAAGCCAGTCAGCGTTAAGGAGTGCTCTGACCAGGACAACACGCGTAGTGAGAGTTACATGTTCGTTGGGCTCTTCCGACTCGGACCTGAGTTGGCCAACGACCCACTTGAGGTCTGAGCCCCGGTGATGAGAAGTATGCATCTCGTTCCCGCAGCTTGCCAGCACTTTCAGAATCATGGCGTGCATGGTAGAATGACTCTTATAACGGACTTCGACATGGCAATATCCCCCCCTTTCAACTTCTAGAGGAGAAAAGTATTGACATGAGCGCTCCCGGCACAACGGCCAAAGAAGTCTCCAATTTCTTATTTCCGAATGACATGCGTCTCCTTGCGGGTAAATCGCCGACCGCAAAACTTAGGAGCCAGGGGGAACAGATAGGTCTAATTAGCTTAAGGGAGTAAATCCTGGGATCGTTCAGTTGTAACCATATACTTACGCTGGGGCTTCTCCGGCGGATTTTTACTGTCACCAACCACGAGATTTGAAGTAAACCAATTGAGCACATAGCCGCGCTATCCGACAATCTCCAAATTATAACATACCGTTCCATGAAGGCCAGAATTACTTACCGGCCCTTTCCATGCGTGCGCCATACCCCCCCACTCCCCCGCTTATCCGTCCGAGGGGAGAGTGTGCGATCCTCCGTTAAGATATTCTTACGTATGACGTAGCTATGTATTTTGCAGAGGTAGCGAACGCGTTGAACACTTCACAGATGGTGGGGATTCGGGCAAAGGGCGTATAATTGGGGACTAACATAGGCGTAAACTACGATGGCACCAACTCAATCGCAGCTCGTGCGCCCTGAATAACGTACTCATCTCAACTGATTCTCGGCAATCTACGGAGCGACTTGATTATCAACAGCTGTCTAGCAGTTCTAATCTTTTGCCAACATCGTAATAGCCTCCAAGAGATTGATCATACCTATCGGCACAGAAGTGACACGACGCCGATGGGTAGCGGACTTTTGGTCAACCACAATTCCCCAGGGGACAGGTCCTGCGGTGCGCATCACTTTGTATGTGCAAGCAACCCAAGTGGGCCCAGCCTGGACTCAGCTGGTTCCTGTGTGAGCTCGAGGCTGGGGATGACAGCTCTTTAAACATAGGGCGGGGGCGTCGAACGGTCGAGAAACTCATAGTACCTCGGGTACCAACTTACTCAGGTTATTGCTTGAAGCTGTACTATTTCAGGGGGGGAGCGCTGAAGGTCTCTTCTTCTGATGACTGAACTCGCAAGGGTCGTGAAGTCGGTTCCTTCAATGGTTAAAAAACAAAGGCTTACTGTGCAGACTGGAACGCCCATCTAGCGGCTCGCGTCTTGAATGCTCGGTCCCCTTTGTCATTCCGGATAAATCCATTTCCCTCATTCACCAGCTTGCGAAGTCTACATTGGTATATGAATGCGACCTAGAAGAGGGCGCTTAAAATTGGGAGTGGTTGATGCTCTATACTCCATTTGGTTTTTTCGTGCATCACCGCGATAGGCTGACAAGGGTTTAACATTGAATAGCAAGGCACTTCCGGTCTCAATGAAGGGCCGGGAAAGGTACGCGCGTGGTATGGGAGGATCAAGGGGCCAATAGAAAGGCTTCTCCCTCACTCGCTAGGAGGCAAATGCAGAACAATGGTTACTACATCGATACGTGAAACATGTCCAACGGTTGCCCAAAGTGTTAAGTGTCTATCACCCCTAGGGCCGTTTCCCGGATATAAACGCCAGGTTGAATCCGCATTTGAAGCTACCATGGATGAGTCTGGGTCGAGCGCGCCGCATTTATTGCGTGAGTAGGGTCGACCAAGAACCGCTAGATGCGTCGCTGTACAAATAGTTGTCGACAGACCGTCGAGTTTAGAAAATGGTACCAGCATTTTCGGGGGATCTCAATCAAGTATGGATTACGGTGTTTACACTGTCCTGCGGCTACCCATGGCCTGAAATCCAGCTCGTGTCAAGCCATTGCCTCTCCGGGACGCCGCATGAAGTAATACATATACCTTGCACGGGTTCACTGCGGTCCGTTCAGAGTCGACCAAGGACACAATCGAGCTCCGATCCGTATGCTCGACTAACTTGTACCCAACCCCCGGAGCTTGGCAGCTCCTGGGGTATCATGGAGCCTGTGGTTCATCCCGTCGGATATCAAACTTCGTCTTGATAAAGCCCCCCGCTCGGGAGTACCAGAGAAGATGTCTACTGAGTTGTGCGATCCCTGCACTTCAGCTAAGGAAGCTACCAATATTTAGTTTCTGAGTCTCACGACAGACCTCGCGCGTAGATTGCCATGCGTAGAGCTAACGAGCCAGCG$'	
SEQ = 'yabbadabbado$'	
INT_SEQ  = SuffixArray.convertToIntegerAlphabetSequence(SEQ)
#B = SuffixArray.buildLinearSA(SEQ)
#print(SuffixArray.buildNaiveSA(SEQ))
print(SuffixArray.buildLinearSA(INT_SEQ))
#print(B)
#print(SuffixArray.isLessThanTriple('b','a', 7, 'a','d', 8))
'''
